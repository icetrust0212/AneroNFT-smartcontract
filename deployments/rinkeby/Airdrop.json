{
  "address": "0x967AaCd98725ACA908736fD1586E289E28d7D2e3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC721Partial",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "amount",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nft",
      "outputs": [
        {
          "internalType": "contract ERC721Partial",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAirdropCount",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xde1a550b1367de74e359dee296d29a8dc97f6dc9dda3542ba29735046bccc6d9",
  "receipt": {
    "to": null,
    "from": "0xc09eAC15f9Ba6462e8E4612af7C431E1cfe08b87",
    "contractAddress": "0x967AaCd98725ACA908736fD1586E289E28d7D2e3",
    "transactionIndex": 20,
    "gasUsed": "817722",
    "logsBloom": "0x
    "blockHash": "0x550be4b6b90a231090ccce41baba4594a5ff4f1d121e9d92b57a4df9aa25cd73",
    "transactionHash": "0xde1a550b1367de74e359dee296d29a8dc97f6dc9dda3542ba29735046bccc6d9",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 10880042,
        "transactionHash": "0xde1a550b1367de74e359dee296d29a8dc97f6dc9dda3542ba29735046bccc6d9",
        "address": "0x967AaCd98725ACA908736fD1586E289E28d7D2e3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c09eac15f9ba6462e8e4612af7c431e1cfe08b87"
        ],
        "data": "0x",
        "logIndex": 26,
        "blockHash": "0x550be4b6b90a231090ccce41baba4594a5ff4f1d121e9d92b57a4df9aa25cd73"
      }
    ],
    "blockNumber": 10880042,
    "cumulativeGasUsed": "4436607",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd7CE44F48F6c239a70943C9E7AaA2Db31c05ECD2",
    "0x5e6cCfBa0aB8Bf8BDEE5ABe9f6eE0BB2f274a609"
  ],
  "numDeployments": 1,
  "solcInputHash": "5566a66c3b28271c05724b183ad00eee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC721Partial\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract ERC721Partial\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAirdropCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(uint16,bytes)\":{\"params\":{\"amount\":\"Which token IDs are transferred?\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(uint16,bytes)\":{\"notice\":\"Tokens on the given ERC-721 contract are transferred from you to a recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Airdrop.sol\":\"Airdrop\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"contracts/Airdrop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\ninterface ERC721Partial {\\r\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\r\\n}\\r\\ncontract Airdrop is Ownable {\\r\\n    using Strings for uint256;\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    ERC721Partial public nft;\\r\\n    uint16 public totalAirdropCount;\\r\\n    address signer;\\r\\n    address treasury;\\r\\n    mapping(address => bool) public claimed;\\r\\n\\r\\n    constructor(ERC721Partial _nft, address _signer) {\\r\\n        nft = _nft;\\r\\n        signer = _signer;\\r\\n        treasury = msg.sender;\\r\\n    }\\r\\n\\r\\n    /// @notice Tokens on the given ERC-721 contract are transferred from you to a recipient.\\r\\n    /// @param  amount      Which token IDs are transferred?\\r\\n    function claim(uint16 amount, bytes calldata signature) external {\\r\\n        require(verifySigner(signature), \\\"Invalid signature.\\\"); \\r\\n        require(totalAirdropCount + amount <= 1858, \\\"Exceeds claim amount\\\");\\r\\n        require(!claimed[msg.sender], \\\"Already claimed.\\\");\\r\\n\\r\\n        for (uint16 index = 0; index < amount; index ++) {\\r\\n            uint256 tokenId = nft.tokenOfOwnerByIndex(treasury, totalAirdropCount + index);\\r\\n            nft.transferFrom(treasury,msg.sender, tokenId);\\r\\n        }\\r\\n        claimed[msg.sender] = true;\\r\\n        totalAirdropCount += amount;\\r\\n    }\\r\\n\\r\\n    //\\r\\n    function verifySigner(bytes calldata signature) \\r\\n        internal view returns (bool) {\\r\\n        bytes32 hash = keccak256(abi.encodePacked(msg.sender));\\r\\n        bytes32 message = ECDSA.toEthSignedMessageHash(hash);\\r\\n        address recoveredAddress = ECDSA.recover(message, signature);\\r\\n        return (recoveredAddress != address(0) && recoveredAddress == signer);\\r\\n    }\\r\\n\\r\\n    function setSigner(address _signer) external onlyOwner {\\r\\n        signer = _signer;\\r\\n    }\\r\\n\\r\\n    function setTreasury(address _treasury) external onlyOwner {\\r\\n        treasury = _treasury;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4dfd54d6969490dedbc8da933b31514b0aaccb638d40a3d387c82d647d6fe4ab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610d45380380610d4583398101604081905261002f916100e1565b61003833610079565b600180546001600160a01b039384166001600160a01b031991821617909155600280549290931691811691909117909155600380549091163317905561011b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146100de57600080fd5b50565b600080604083850312156100f457600080fd5b82516100ff816100c9565b6020840151909250610110816100c9565b809150509250929050565b610c1b8061012a6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638694dab6116100665780638694dab61461010d5780638da5cb5b14610120578063c884ef8314610131578063f0f4426014610164578063f2fde38b1461017757600080fd5b806347ccca02146100985780636872ad86146100c85780636c19e783146100f0578063715018a614610105575b600080fd5b6001546100ab906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100dd90600160a01b900461ffff1681565b60405161ffff90911681526020016100bf565b6101036100fe366004610a4f565b61018a565b005b6101036101df565b61010361011b366004610a7f565b610215565b6000546001600160a01b03166100ab565b61015461013f366004610a4f565b60046020526000908152604090205460ff1681565b60405190151581526020016100bf565b610103610172366004610a4f565b6104b1565b610103610185366004610a4f565b6104fd565b6000546001600160a01b031633146101bd5760405162461bcd60e51b81526004016101b490610b0b565b60405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146102095760405162461bcd60e51b81526004016101b490610b0b565b6102136000610598565b565b61021f82826105e8565b6102605760405162461bcd60e51b815260206004820152601260248201527124b73b30b634b21039b4b3b730ba3ab9329760711b60448201526064016101b4565b6001546107429061027d908590600160a01b900461ffff16610b56565b61ffff1611156102c65760405162461bcd60e51b8152602060048201526014602482015273115e18d959591cc818db185a5b48185b5bdd5b9d60621b60448201526064016101b4565b3360009081526004602052604090205460ff16156103195760405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c9031b630b4b6b2b21760811b60448201526064016101b4565b60005b8361ffff168161ffff161015610455576001546003546000916001600160a01b0380821692632f745c5992911690610360908690600160a01b900461ffff16610b56565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015261ffff166024820152604401602060405180830381865afa1580156103ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d19190610b7c565b6001546003546040516323b872dd60e01b81526001600160a01b0391821660048201523360248201526044810184905292935016906323b872dd90606401600060405180830381600087803b15801561042957600080fd5b505af115801561043d573d6000803e3d6000fd5b5050505050808061044d90610b95565b91505061031c565b50336000908152600460205260409020805460ff19166001908117909155805484919060149061049290849061ffff600160a01b90910416610b56565b92506101000a81548161ffff021916908361ffff160217905550505050565b6000546001600160a01b031633146104db5760405162461bcd60e51b81526004016101b490610b0b565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146105275760405162461bcd60e51b81526004016101b490610b0b565b6001600160a01b03811661058c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101b4565b61059581610598565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080513360601b6bffffffffffffffffffffffff1916602080830191909152825160148184030181526034830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006054840152607080840182905284518085039091018152609090930190935281519101206000919060006106a98287878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506106da92505050565b90506001600160a01b038116158015906106d057506002546001600160a01b038281169116145b9695505050505050565b60008060006106e985856106fe565b915091506106f68161076e565b509392505050565b6000808251604114156107355760208301516040840151606085015160001a61072987828585610929565b94509450505050610767565b82516040141561075f5760208301516040840151610754868383610a16565b935093505050610767565b506000905060025b9250929050565b600081600481111561078257610782610bb7565b141561078b5750565b600181600481111561079f5761079f610bb7565b14156107ed5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016101b4565b600281600481111561080157610801610bb7565b141561084f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016101b4565b600381600481111561086357610863610bb7565b14156108bc5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016101b4565b60048160048111156108d0576108d0610bb7565b14156105955760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016101b4565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156109605750600090506003610a0d565b8460ff16601b1415801561097857508460ff16601c14155b156109895750600090506004610a0d565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156109dd573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610a0657600060019250925050610a0d565b9150600090505b94509492505050565b6000806001600160ff1b03831681610a3360ff86901c601b610bcd565b9050610a4187828885610929565b935093505050935093915050565b600060208284031215610a6157600080fd5b81356001600160a01b0381168114610a7857600080fd5b9392505050565b600080600060408486031215610a9457600080fd5b833561ffff81168114610aa657600080fd5b9250602084013567ffffffffffffffff80821115610ac357600080fd5b818601915086601f830112610ad757600080fd5b813581811115610ae657600080fd5b876020828501011115610af857600080fd5b6020830194508093505050509250925092565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600061ffff808316818516808303821115610b7357610b73610b40565b01949350505050565b600060208284031215610b8e57600080fd5b5051919050565b600061ffff80831681811415610bad57610bad610b40565b6001019392505050565b634e487b7160e01b600052602160045260246000fd5b60008219821115610be057610be0610b40565b50019056fea26469706673582212203e175cd81e62492824190eb616ca3998dd68d000711520308e795c4cffc7087164736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80638694dab6116100665780638694dab61461010d5780638da5cb5b14610120578063c884ef8314610131578063f0f4426014610164578063f2fde38b1461017757600080fd5b806347ccca02146100985780636872ad86146100c85780636c19e783146100f0578063715018a614610105575b600080fd5b6001546100ab906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100dd90600160a01b900461ffff1681565b60405161ffff90911681526020016100bf565b6101036100fe366004610a4f565b61018a565b005b6101036101df565b61010361011b366004610a7f565b610215565b6000546001600160a01b03166100ab565b61015461013f366004610a4f565b60046020526000908152604090205460ff1681565b60405190151581526020016100bf565b610103610172366004610a4f565b6104b1565b610103610185366004610a4f565b6104fd565b6000546001600160a01b031633146101bd5760405162461bcd60e51b81526004016101b490610b0b565b60405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146102095760405162461bcd60e51b81526004016101b490610b0b565b6102136000610598565b565b61021f82826105e8565b6102605760405162461bcd60e51b815260206004820152601260248201527124b73b30b634b21039b4b3b730ba3ab9329760711b60448201526064016101b4565b6001546107429061027d908590600160a01b900461ffff16610b56565b61ffff1611156102c65760405162461bcd60e51b8152602060048201526014602482015273115e18d959591cc818db185a5b48185b5bdd5b9d60621b60448201526064016101b4565b3360009081526004602052604090205460ff16156103195760405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c9031b630b4b6b2b21760811b60448201526064016101b4565b60005b8361ffff168161ffff161015610455576001546003546000916001600160a01b0380821692632f745c5992911690610360908690600160a01b900461ffff16610b56565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015261ffff166024820152604401602060405180830381865afa1580156103ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d19190610b7c565b6001546003546040516323b872dd60e01b81526001600160a01b0391821660048201523360248201526044810184905292935016906323b872dd90606401600060405180830381600087803b15801561042957600080fd5b505af115801561043d573d6000803e3d6000fd5b5050505050808061044d90610b95565b91505061031c565b50336000908152600460205260409020805460ff19166001908117909155805484919060149061049290849061ffff600160a01b90910416610b56565b92506101000a81548161ffff021916908361ffff160217905550505050565b6000546001600160a01b031633146104db5760405162461bcd60e51b81526004016101b490610b0b565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146105275760405162461bcd60e51b81526004016101b490610b0b565b6001600160a01b03811661058c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101b4565b61059581610598565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080513360601b6bffffffffffffffffffffffff1916602080830191909152825160148184030181526034830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006054840152607080840182905284518085039091018152609090930190935281519101206000919060006106a98287878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506106da92505050565b90506001600160a01b038116158015906106d057506002546001600160a01b038281169116145b9695505050505050565b60008060006106e985856106fe565b915091506106f68161076e565b509392505050565b6000808251604114156107355760208301516040840151606085015160001a61072987828585610929565b94509450505050610767565b82516040141561075f5760208301516040840151610754868383610a16565b935093505050610767565b506000905060025b9250929050565b600081600481111561078257610782610bb7565b141561078b5750565b600181600481111561079f5761079f610bb7565b14156107ed5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016101b4565b600281600481111561080157610801610bb7565b141561084f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016101b4565b600381600481111561086357610863610bb7565b14156108bc5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016101b4565b60048160048111156108d0576108d0610bb7565b14156105955760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016101b4565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156109605750600090506003610a0d565b8460ff16601b1415801561097857508460ff16601c14155b156109895750600090506004610a0d565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156109dd573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610a0657600060019250925050610a0d565b9150600090505b94509492505050565b6000806001600160ff1b03831681610a3360ff86901c601b610bcd565b9050610a4187828885610929565b935093505050935093915050565b600060208284031215610a6157600080fd5b81356001600160a01b0381168114610a7857600080fd5b9392505050565b600080600060408486031215610a9457600080fd5b833561ffff81168114610aa657600080fd5b9250602084013567ffffffffffffffff80821115610ac357600080fd5b818601915086601f830112610ad757600080fd5b813581811115610ae657600080fd5b876020828501011115610af857600080fd5b6020830194508093505050509250925092565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600061ffff808316818516808303821115610b7357610b73610b40565b01949350505050565b600060208284031215610b8e57600080fd5b5051919050565b600061ffff80831681811415610bad57610bad610b40565b6001019392505050565b634e487b7160e01b600052602160045260246000fd5b60008219821115610be057610be0610b40565b50019056fea26469706673582212203e175cd81e62492824190eb616ca3998dd68d000711520308e795c4cffc7087164736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(uint16,bytes)": {
        "params": {
          "amount": "Which token IDs are transferred?"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(uint16,bytes)": {
        "notice": "Tokens on the given ERC-721 contract are transferred from you to a recipient."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 770,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "nft",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ERC721Partial)759"
      },
      {
        "astId": 772,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "totalAirdropCount",
        "offset": 20,
        "slot": "1",
        "type": "t_uint16"
      },
      {
        "astId": 774,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "signer",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 776,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "treasury",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 780,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "claimed",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC721Partial)759": {
        "encoding": "inplace",
        "label": "contract ERC721Partial",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      }
    }
  }
}