{
  "address": "0x17589c2fACdf08380468da92a04cFb0EA2aD0C92",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC721Partial",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "airdropAmount",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "amount",
          "type": "uint16"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nft",
      "outputs": [
        {
          "internalType": "contract ERC721Partial",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_airdropAmount",
          "type": "uint16"
        }
      ],
      "name": "setAirdropAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAirdropCount",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x933de58883def15d37327c8b92eb474e0e0b118075504b2974c023f3082ace11",
  "receipt": {
    "to": null,
    "from": "0x92f4867b2716EDC0725F0492D5217b64801e68c2",
    "contractAddress": "0x17589c2fACdf08380468da92a04cFb0EA2aD0C92",
    "transactionIndex": 90,
    "gasUsed": "899719",
    "logsBloom": "0x
    "blockHash": "0xdb8c59e05707a575582ee34ed462b026a8bc08b30e7b44a8ca4a0bde93f366dd",
    "transactionHash": "0x933de58883def15d37327c8b92eb474e0e0b118075504b2974c023f3082ace11",
    "logs": [
      {
        "transactionIndex": 90,
        "blockNumber": 15013362,
        "transactionHash": "0x933de58883def15d37327c8b92eb474e0e0b118075504b2974c023f3082ace11",
        "address": "0x17589c2fACdf08380468da92a04cFb0EA2aD0C92",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000092f4867b2716edc0725f0492d5217b64801e68c2"
        ],
        "data": "0x",
        "logIndex": 127,
        "blockHash": "0xdb8c59e05707a575582ee34ed462b026a8bc08b30e7b44a8ca4a0bde93f366dd"
      }
    ],
    "blockNumber": 15013362,
    "cumulativeGasUsed": "10559001",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x926baA7445D56D5E8632046409cDC7d5844CE344",
    "0x5e6cCfBa0aB8Bf8BDEE5ABe9f6eE0BB2f274a609"
  ],
  "numDeployments": 1,
  "solcInputHash": "5b7d6983ccb376bc65b4da5bce8b7a6f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC721Partial\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"airdropAmount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract ERC721Partial\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_airdropAmount\",\"type\":\"uint16\"}],\"name\":\"setAirdropAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAirdropCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(uint16,uint256[],bytes)\":{\"params\":{\"amount\":\"Which token IDs are transferred?\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(uint16,uint256[],bytes)\":{\"notice\":\"Tokens on the given ERC-721 contract are transferred from you to a recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Airdrop.sol\":\"Airdrop\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Airdrop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\n// \\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n// \\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n// \\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\\n// \\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\\n// \\ninterface ERC721Partial {\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n}\\n\\ncontract Airdrop is Ownable {\\n    using Strings for uint256;\\n    using ECDSA for bytes32;\\n\\n    ERC721Partial public nft;\\n    uint16 public totalAirdropCount;\\n    uint16 public airdropAmount = 1858;\\n    address signer;\\n    address treasury;\\n    mapping(address => bool) public claimed;\\n\\n    constructor(ERC721Partial _nft, address _signer) {\\n        nft = _nft;\\n        signer = _signer;\\n        treasury = msg.sender;\\n    }\\n\\n    /// @notice Tokens on the given ERC-721 contract are transferred from you to a recipient.\\n    /// @param  amount      Which token IDs are transferred?\\n    function claim(uint16 amount, uint256[] memory tokenIDs, bytes calldata signature) external {\\n        require(verifySigner(signature, amount), \\\"Invalid signature.\\\"); \\n        require(totalAirdropCount + amount <= airdropAmount, \\\"Exceeds claim amount\\\");\\n        require(!claimed[msg.sender], \\\"Already claimed.\\\");\\n        require(tokenIDs.length == amount, \\\"Invalid token ID and amount\\\");\\n\\n        for (uint16 index = 0; index < amount; index ++) {\\n            nft.transferFrom(treasury,msg.sender, tokenIDs[index]);\\n        }\\n        claimed[msg.sender] = true;\\n        totalAirdropCount += amount;\\n    }\\n\\n    //\\n    function verifySigner(bytes calldata signature, uint16 amount) \\n        internal view returns (bool) {\\n        bytes32 hash = keccak256(abi.encodePacked(msg.sender, amount));\\n        bytes32 message = ECDSA.toEthSignedMessageHash(hash);\\n        address recoveredAddress = ECDSA.recover(message, signature);\\n        return (recoveredAddress != address(0) && recoveredAddress == signer);\\n    }\\n\\n    function setSigner(address _signer) external onlyOwner {\\n        signer = _signer;\\n    }\\n\\n    function setTreasury(address _treasury) external onlyOwner {\\n        treasury = _treasury;\\n    }\\n\\n    function setAirdropAmount(uint16 _airdropAmount) external onlyOwner {\\n        airdropAmount = _airdropAmount;\\n    }\\n}\",\"keccak256\":\"0x64314bb6db2dc095e78d308d3ccd63273be2aabc7e6836569b1001b551d4518b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001805461ffff60b01b19166103a160b11b17905534801561002557600080fd5b50604051610ed3380380610ed3833981016040819052610044916100f6565b61004d3361008e565b600180546001600160a01b039384166001600160a01b0319918216179091556002805492909316918116919091179091556003805490911633179055610130565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146100f357600080fd5b50565b6000806040838503121561010957600080fd5b8251610114816100de565b6020840151909250610125816100de565b809150509250929050565b610d948061013f6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063a4064b2c11610071578063a4064b2c14610134578063c884ef8314610147578063dee22cf31461017a578063f0f442601461018d578063f2fde38b146101a0578063fc2ea8a5146101b357600080fd5b806347ccca02146100ae5780636872ad86146100de5780636c19e78314610106578063715018a61461011b5780638da5cb5b14610123575b600080fd5b6001546100c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100f390600160a01b900461ffff1681565b60405161ffff90911681526020016100d5565b610119610114366004610ada565b6101c8565b005b61011961021d565b6000546001600160a01b03166100c1565b610119610142366004610b21565b610253565b61016a610155366004610ada565b60046020526000908152604090205460ff1681565b60405190151581526020016100d5565b610119610188366004610b94565b61029f565b61011961019b366004610ada565b610527565b6101196101ae366004610ada565b610573565b6001546100f390600160b01b900461ffff1681565b6000546001600160a01b031633146101fb5760405162461bcd60e51b81526004016101f290610c87565b60405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146102475760405162461bcd60e51b81526004016101f290610c87565b610251600061060e565b565b6000546001600160a01b0316331461027d5760405162461bcd60e51b81526004016101f290610c87565b6001805461ffff909216600160b01b0261ffff60b01b19909216919091179055565b6102aa82828661065e565b6102eb5760405162461bcd60e51b815260206004820152601260248201527124b73b30b634b21039b4b3b730ba3ab9329760711b60448201526064016101f2565b60015461ffff600160b01b820481169161030e918791600160a01b900416610cd2565b61ffff1611156103575760405162461bcd60e51b8152602060048201526014602482015273115e18d959591cc818db185a5b48185b5bdd5b9d60621b60448201526064016101f2565b3360009081526004602052604090205460ff16156103aa5760405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c9031b630b4b6b2b21760811b60448201526064016101f2565b8361ffff168351146103fe5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420746f6b656e20494420616e6420616d6f756e74000000000060448201526064016101f2565b60005b8461ffff168161ffff1610156104ca5760015460035485516001600160a01b03928316926323b872dd9216903390889061ffff871690811061044557610445610cf8565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801561049f57600080fd5b505af11580156104b3573d6000803e3d6000fd5b5050505080806104c290610d0e565b915050610401565b50336000908152600460205260409020805460ff19166001908117909155805485919060149061050790849061ffff600160a01b90910416610cd2565b92506101000a81548161ffff021916908361ffff16021790555050505050565b6000546001600160a01b031633146105515760405162461bcd60e51b81526004016101f290610c87565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461059d5760405162461bcd60e51b81526004016101f290610c87565b6001600160a01b0381166106025760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101f2565b61060b8161060e565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080513360601b6bffffffffffffffffffffffff191660208083019190915260f084901b6001600160f01b0319166034830152825160168184030181526036830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006056840152607280840182905284518085039091018152609290930190935281519101206000919060006107338288888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061076592505050565b90506001600160a01b0381161580159061075a57506002546001600160a01b038281169116145b979650505050505050565b60008060006107748585610789565b91509150610781816107f9565b509392505050565b6000808251604114156107c05760208301516040840151606085015160001a6107b4878285856109b4565b945094505050506107f2565b8251604014156107ea57602083015160408401516107df868383610aa1565b9350935050506107f2565b506000905060025b9250929050565b600081600481111561080d5761080d610d30565b14156108165750565b600181600481111561082a5761082a610d30565b14156108785760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016101f2565b600281600481111561088c5761088c610d30565b14156108da5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016101f2565b60038160048111156108ee576108ee610d30565b14156109475760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016101f2565b600481600481111561095b5761095b610d30565b141561060b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016101f2565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156109eb5750600090506003610a98565b8460ff16601b14158015610a0357508460ff16601c14155b15610a145750600090506004610a98565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610a68573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610a9157600060019250925050610a98565b9150600090505b94509492505050565b6000806001600160ff1b03831681610abe60ff86901c601b610d46565b9050610acc878288856109b4565b935093505050935093915050565b600060208284031215610aec57600080fd5b81356001600160a01b0381168114610b0357600080fd5b9392505050565b803561ffff81168114610b1c57600080fd5b919050565b600060208284031215610b3357600080fd5b610b0382610b0a565b634e487b7160e01b600052604160045260246000fd5b60008083601f840112610b6457600080fd5b50813567ffffffffffffffff811115610b7c57600080fd5b6020830191508360208285010111156107f257600080fd5b60008060008060608587031215610baa57600080fd5b610bb385610b0a565b935060208086013567ffffffffffffffff80821115610bd157600080fd5b818801915088601f830112610be557600080fd5b813581811115610bf757610bf7610b3c565b8060051b604051601f19603f83011681018181108582111715610c1c57610c1c610b3c565b6040529182528381018501918581018c841115610c3857600080fd5b948601945b83861015610c545785358152948601948601610c3d565b50975050506040880135925080831115610c6d57600080fd5b5050610c7b87828801610b52565b95989497509550505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600061ffff808316818516808303821115610cef57610cef610cbc565b01949350505050565b634e487b7160e01b600052603260045260246000fd5b600061ffff80831681811415610d2657610d26610cbc565b6001019392505050565b634e487b7160e01b600052602160045260246000fd5b60008219821115610d5957610d59610cbc565b50019056fea2646970667358221220be90e3afe1b51f1110f3ea6d37043694051e192d22ead440ddd42278b8efaf8b64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063a4064b2c11610071578063a4064b2c14610134578063c884ef8314610147578063dee22cf31461017a578063f0f442601461018d578063f2fde38b146101a0578063fc2ea8a5146101b357600080fd5b806347ccca02146100ae5780636872ad86146100de5780636c19e78314610106578063715018a61461011b5780638da5cb5b14610123575b600080fd5b6001546100c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100f390600160a01b900461ffff1681565b60405161ffff90911681526020016100d5565b610119610114366004610ada565b6101c8565b005b61011961021d565b6000546001600160a01b03166100c1565b610119610142366004610b21565b610253565b61016a610155366004610ada565b60046020526000908152604090205460ff1681565b60405190151581526020016100d5565b610119610188366004610b94565b61029f565b61011961019b366004610ada565b610527565b6101196101ae366004610ada565b610573565b6001546100f390600160b01b900461ffff1681565b6000546001600160a01b031633146101fb5760405162461bcd60e51b81526004016101f290610c87565b60405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146102475760405162461bcd60e51b81526004016101f290610c87565b610251600061060e565b565b6000546001600160a01b0316331461027d5760405162461bcd60e51b81526004016101f290610c87565b6001805461ffff909216600160b01b0261ffff60b01b19909216919091179055565b6102aa82828661065e565b6102eb5760405162461bcd60e51b815260206004820152601260248201527124b73b30b634b21039b4b3b730ba3ab9329760711b60448201526064016101f2565b60015461ffff600160b01b820481169161030e918791600160a01b900416610cd2565b61ffff1611156103575760405162461bcd60e51b8152602060048201526014602482015273115e18d959591cc818db185a5b48185b5bdd5b9d60621b60448201526064016101f2565b3360009081526004602052604090205460ff16156103aa5760405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c9031b630b4b6b2b21760811b60448201526064016101f2565b8361ffff168351146103fe5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420746f6b656e20494420616e6420616d6f756e74000000000060448201526064016101f2565b60005b8461ffff168161ffff1610156104ca5760015460035485516001600160a01b03928316926323b872dd9216903390889061ffff871690811061044557610445610cf8565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801561049f57600080fd5b505af11580156104b3573d6000803e3d6000fd5b5050505080806104c290610d0e565b915050610401565b50336000908152600460205260409020805460ff19166001908117909155805485919060149061050790849061ffff600160a01b90910416610cd2565b92506101000a81548161ffff021916908361ffff16021790555050505050565b6000546001600160a01b031633146105515760405162461bcd60e51b81526004016101f290610c87565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461059d5760405162461bcd60e51b81526004016101f290610c87565b6001600160a01b0381166106025760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101f2565b61060b8161060e565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080513360601b6bffffffffffffffffffffffff191660208083019190915260f084901b6001600160f01b0319166034830152825160168184030181526036830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006056840152607280840182905284518085039091018152609290930190935281519101206000919060006107338288888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061076592505050565b90506001600160a01b0381161580159061075a57506002546001600160a01b038281169116145b979650505050505050565b60008060006107748585610789565b91509150610781816107f9565b509392505050565b6000808251604114156107c05760208301516040840151606085015160001a6107b4878285856109b4565b945094505050506107f2565b8251604014156107ea57602083015160408401516107df868383610aa1565b9350935050506107f2565b506000905060025b9250929050565b600081600481111561080d5761080d610d30565b14156108165750565b600181600481111561082a5761082a610d30565b14156108785760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016101f2565b600281600481111561088c5761088c610d30565b14156108da5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016101f2565b60038160048111156108ee576108ee610d30565b14156109475760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016101f2565b600481600481111561095b5761095b610d30565b141561060b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016101f2565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156109eb5750600090506003610a98565b8460ff16601b14158015610a0357508460ff16601c14155b15610a145750600090506004610a98565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610a68573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610a9157600060019250925050610a98565b9150600090505b94509492505050565b6000806001600160ff1b03831681610abe60ff86901c601b610d46565b9050610acc878288856109b4565b935093505050935093915050565b600060208284031215610aec57600080fd5b81356001600160a01b0381168114610b0357600080fd5b9392505050565b803561ffff81168114610b1c57600080fd5b919050565b600060208284031215610b3357600080fd5b610b0382610b0a565b634e487b7160e01b600052604160045260246000fd5b60008083601f840112610b6457600080fd5b50813567ffffffffffffffff811115610b7c57600080fd5b6020830191508360208285010111156107f257600080fd5b60008060008060608587031215610baa57600080fd5b610bb385610b0a565b935060208086013567ffffffffffffffff80821115610bd157600080fd5b818801915088601f830112610be557600080fd5b813581811115610bf757610bf7610b3c565b8060051b604051601f19603f83011681018181108582111715610c1c57610c1c610b3c565b6040529182528381018501918581018c841115610c3857600080fd5b948601945b83861015610c545785358152948601948601610c3d565b50975050506040880135925080831115610c6d57600080fd5b5050610c7b87828801610b52565b95989497509550505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600061ffff808316818516808303821115610cef57610cef610cbc565b01949350505050565b634e487b7160e01b600052603260045260246000fd5b600061ffff80831681811415610d2657610d26610cbc565b6001019392505050565b634e487b7160e01b600052602160045260246000fd5b60008219821115610d5957610d59610cbc565b50019056fea2646970667358221220be90e3afe1b51f1110f3ea6d37043694051e192d22ead440ddd42278b8efaf8b64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(uint16,uint256[],bytes)": {
        "params": {
          "amount": "Which token IDs are transferred?"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(uint16,uint256[],bytes)": {
        "notice": "Tokens on the given ERC-721 contract are transferred from you to a recipient."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 758,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "nft",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ERC721Partial)747"
      },
      {
        "astId": 760,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "totalAirdropCount",
        "offset": 20,
        "slot": "1",
        "type": "t_uint16"
      },
      {
        "astId": 763,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "airdropAmount",
        "offset": 22,
        "slot": "1",
        "type": "t_uint16"
      },
      {
        "astId": 765,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "signer",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 767,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "treasury",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 771,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "claimed",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC721Partial)747": {
        "encoding": "inplace",
        "label": "contract ERC721Partial",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      }
    }
  }
}